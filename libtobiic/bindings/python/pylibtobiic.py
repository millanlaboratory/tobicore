# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pylibtobiic', [dirname(__file__)])
        except ImportError:
            import _pylibtobiic
            return _pylibtobiic
        if fp is not None:
            try:
                _mod = imp.load_module('_pylibtobiic', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pylibtobiic = swig_import_helper()
    del swig_import_helper
else:
    import _pylibtobiic
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class ICClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ICClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ICClass, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pylibtobiic.new_ICClass(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pylibtobiic.delete_ICClass
    __del__ = lambda self : None;
    def GetValue(self): return _pylibtobiic.ICClass_GetValue(self)
    def GetCValue(self): return _pylibtobiic.ICClass_GetCValue(self)
    def GetLabel(self): return _pylibtobiic.ICClass_GetLabel(self)
    def SetValue(self, value = 0.00): return _pylibtobiic.ICClass_SetValue(self, value)
ICClass_swigregister = _pylibtobiic.ICClass_swigregister
ICClass_swigregister(ICClass)

class ICClassifier(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ICClassifier, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ICClassifier, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pylibtobiic.new_ICClassifier(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pylibtobiic.delete_ICClassifier
    __del__ = lambda self : None;
    def AddClass(self, *args): return _pylibtobiic.ICClassifier_AddClass(self, *args)
    def RemoveClass(self, *args): return _pylibtobiic.ICClassifier_RemoveClass(self, *args)
    def GetClass(self, *args): return _pylibtobiic.ICClassifier_GetClass(self, *args)
    def GetName(self): return _pylibtobiic.ICClassifier_GetName(self)
    def GetDescription(self): return _pylibtobiic.ICClassifier_GetDescription(self)
    def GetValueType(self): return _pylibtobiic.ICClassifier_GetValueType(self)
    def GetLabelType(self): return _pylibtobiic.ICClassifier_GetLabelType(self)
    def AtBegin(self, *args): return _pylibtobiic.ICClassifier_AtBegin(self, *args)
    def AtEnd(self, *args): return _pylibtobiic.ICClassifier_AtEnd(self, *args)
    def IsEmpty(self): return _pylibtobiic.ICClassifier_IsEmpty(self)
    def HasClass(self, *args): return _pylibtobiic.ICClassifier_HasClass(self, *args)
    ValueUndef = _pylibtobiic.ICClassifier_ValueUndef
    ValueProb = _pylibtobiic.ICClassifier_ValueProb
    ValueDist = _pylibtobiic.ICClassifier_ValueDist
    ValueCLbl = _pylibtobiic.ICClassifier_ValueCLbl
    ValueRCoe = _pylibtobiic.ICClassifier_ValueRCoe
    LabelUndef = _pylibtobiic.ICClassifier_LabelUndef
    LabelBiosig = _pylibtobiic.ICClassifier_LabelBiosig
    LabelCustom = _pylibtobiic.ICClassifier_LabelCustom
ICClassifier_swigregister = _pylibtobiic.ICClassifier_swigregister
ICClassifier_swigregister(ICClassifier)

IC_VERSION = _pylibtobiic.IC_VERSION
IC_NODENAME = _pylibtobiic.IC_NODENAME
class ICMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ICMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ICMessage, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pylibtobiic.delete_ICMessage
    __del__ = lambda self : None;
    def AddClassifier(self, *args): return _pylibtobiic.ICMessage_AddClassifier(self, *args)
    def RemoveClassifier(self, *args): return _pylibtobiic.ICMessage_RemoveClassifier(self, *args)
    def GetClassifier(self, *args): return _pylibtobiic.ICMessage_GetClassifier(self, *args)
    def GetClass(self, *args): return _pylibtobiic.ICMessage_GetClass(self, *args)
    def GetValue(self, *args): return _pylibtobiic.ICMessage_GetValue(self, *args)
    def Dump(self): return _pylibtobiic.ICMessage_Dump(self)
    def Serialize(self, *args): return _pylibtobiic.ICMessage_Serialize(self, *args)
    def Deserialize(self, *args): return _pylibtobiic.ICMessage_Deserialize(self, *args)
    def AtBegin(self, *args): return _pylibtobiic.ICMessage_AtBegin(self, *args)
    def AtEnd(self, *args): return _pylibtobiic.ICMessage_AtEnd(self, *args)
    def IsEmpty(self): return _pylibtobiic.ICMessage_IsEmpty(self)
    def HasClassifier(self, *args): return _pylibtobiic.ICMessage_HasClassifier(self, *args)
ICMessage_swigregister = _pylibtobiic.ICMessage_swigregister
ICMessage_swigregister(ICMessage)

class ICMessageRapid(ICMessage):
    __swig_setmethods__ = {}
    for _s in [ICMessage]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ICMessageRapid, name, value)
    __swig_getmethods__ = {}
    for _s in [ICMessage]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ICMessageRapid, name)
    __repr__ = _swig_repr
    def __init__(self, indent = False): 
        this = _pylibtobiic.new_ICMessageRapid(indent)
        try: self.this.append(this)
        except: self.this = this
    def Serialize(self, *args): return _pylibtobiic.ICMessageRapid_Serialize(self, *args)
    __swig_destroy__ = _pylibtobiic.delete_ICMessageRapid
    __del__ = lambda self : None;
ICMessageRapid_swigregister = _pylibtobiic.ICMessageRapid_swigregister
ICMessageRapid_swigregister(ICMessageRapid)

ICTYPES_ENTRY_UNDEF = _pylibtobiic.ICTYPES_ENTRY_UNDEF
ICTYPES_ENTRY_PROB = _pylibtobiic.ICTYPES_ENTRY_PROB
ICTYPES_ENTRY_DIST = _pylibtobiic.ICTYPES_ENTRY_DIST
ICTYPES_ENTRY_CLBL = _pylibtobiic.ICTYPES_ENTRY_CLBL
ICTYPES_ENTRY_RCOE = _pylibtobiic.ICTYPES_ENTRY_RCOE
ICTYPES_LABEL_UNDEF = _pylibtobiic.ICTYPES_LABEL_UNDEF
ICTYPES_LABEL_BIOSIG = _pylibtobiic.ICTYPES_LABEL_BIOSIG
ICTYPES_LABEL_CUSTOM = _pylibtobiic.ICTYPES_LABEL_CUSTOM


