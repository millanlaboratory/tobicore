%   Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
%   Michele Tavella <michele.tavella@epfl.ch>
%
%   This program is free software: you can redistribute it and/or modify
%   it under the terms of the GNU General Public License as published by
%   the Free Software Foundation, either version 3 of the License, or
%   (at your option) any later version.
%
%   This program is distributed in the hope that it will be useful,
%   but WITHOUT ANY WARRANTY; without even the implied warranty of
%   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%   GNU General Public License for more details.
%
%   You should have received a copy of the GNU General Public License
%   along with this program.  If not, see <http://www.gnu.org/licenses/>.

$ #include <tobiid/IDSerializerRapid.hpp>
$ #include <tobiic/ICSerializerRapid.hpp>
$ #include <tobicore/TCException.hpp>
$ #include <tobiplatform/TPiC.hpp>
$ #include <tobiplatform/TPiD.hpp>
$ #include <cstring>
$ #include <stdio.h>
$ #include <mex.h>


@function [c] = tpic_new();
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
%
% TPIC_NEW Allocates an TPiC object
%
% C = TPIC_NEW() returns the handle C to a new TPiC object.
%
% See also TPIC_DELETE
	# TPiC* c = new TPiC();

@function [c] = tpic_delete(c);
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
%
% TPIC_DELETE deletes a TPiC object
%
% C = TPIC_DELETE(C) frees the instance of a TPiC object 
% pointed by the handle C. 
%
% See also TPIC_NEW
	# delete(TPiC* c);
	c = 0;

@function [retval, c] = tpic_plug(c, addr, port, mode);
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
%
% TPIC_PLUG plugs a TPiC object
%
% [RETVAL, C] = TPIC_PLUG(C, ADDR, PORT, ASCLIENT) plugs the TPiC handle C to a TOBI
% iC server listening at ADDR:PORT. ASCLIENT is a boolean and indicates whether
% the C object will be configured as client (for sending iC message) or as server 
% (for receiving iC messages). 
% RETVAL indicates the status of the connection (list of retvals and associated 
% descriptions is provided by TP_RETVAL).
%
% See also TPIC_UNPLUG, TP_RETVAL
	$ int tpic_plug(TPiC* c, char* addr, char* port, int mode) {
	$	int retval = TPiD::Unsuccessful;
	$ 	try {
	$ 		std::string sAddr(addr);
	$ 		std::string sPort(port);
	$		retval = c->Plug(sAddr, sPort, mode);
	$	} catch(TCException e) {
	$		mexPrintf("[tpic_plug] Exception in libtobiplatform: %s, %s\n",
	$			e.GetCaller().c_str(), e.GetInfo().c_str());
	$	}
	$	return retval;
	$ } 
	$
	# int retval = tpic_plug(TPiC* c, cstring addr[64], cstring port[64], int mode);

@function [c] = tpic_unplug(c);
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
%
% TPIC_UNPLUG unplugs a TPiC object
%
% See also TPIC_PLUG
	$ void tpic_unplug(TPiC* c) {
	$ 	try {
	$		c->Unplug();
	$	} catch(TCException e) {
	$		mexPrintf("[tpic_unplug] Exception in libtobiplatform: %s, %s\n",
	$			e.GetCaller().c_str(), e.GetInfo().c_str());
	$	}
	$ } 
	$
	# tpic_unplug(TPiC* c);

@function [retval, c] = tpic_setrapid(c, s);
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
%
% TPIC_SET sets/sends an ICMESSAGE
%
% [RETVAL, C] = TPIC_SET(C, S) sends the content of an iC serializer object 
% (pointed by the S handle) using a TPiC object (pointed by the C handle).
% RETVAL indicates the status of the connection (list of retvals and associated 
% descriptions is provided by TP_RETVAL).
%
% See also TPIC_GET, TP_RETVAL
	$ int tpic_setrapid(TPiC* c, ICSerializerRapid* serializer) {
	$	int retval = TPiD::Unsuccessful;
	$ 	try {
	$		retval = c->Set(serializer);
	$	} catch(TCException e) {
	$		mexPrintf("[tpic_setrapid] Exception in libtobiplatform: %s, %s\n",
	$			e.GetCaller().c_str(), e.GetInfo().c_str());
	$	}
	$	return retval;
	$ } 
	$
	# int retval = tpic_setrapid(TPiC* c, ICSerializerRapid* s);

@function [retval, c] = tpic_getrapid(c, s);
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
%
% TPIC_GET gets/receives an ICMESSAGE
%
% [RETVAL, C] = TPIC_GET(C, S) receives an ICMessage in an iC serializer object 
% (pointed by the S handle) using a TPiC object (pointed by the C handle).
% RETVAL indicates the status of the connection (list of retvals and associated 
% descriptions is provided by TP_RETVAL).
%
% See also TPIC_SET, TP_RETVAL
	$ int tpic_getrapid(TPiC* c, ICSerializerRapid* serializer) {
	$	int retval = TPiD::Unsuccessful;
	$ 	try {
	$		retval = c->Get(serializer);
	$	} catch(TCException e) {
	$		mexPrintf("[tpic_getrapid] Exception in libtobiplatform: %s, %s\n",
	$			e.GetCaller().c_str(), e.GetInfo().c_str());
	$	}
	$	return retval;
	$ } 
	$
	# int retval = tpic_getrapid(TPiC* c, ICSerializerRapid* s);

@function [d] = tpid_new();
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
%
% TPID_NEW Allocates an TPiD object
%
% D = TPID_NEW() returns the handle D to a new TPiC object.
%
% See also TPID_DELETE
	# TPiD* d = new TPiD();

@function [d] = tpid_delete(d);
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
%
% TPID_DELETE deletes a TPiD object
%
% D = TPID_DELETE(D) frees the instance of a TPiD object 
% pointed by the handle D. 
%
% See also TPID_NEW 
	# delete(TPiD* d);
	d = 0;

@function [retval, d] = tpid_plug(d, addr, port, mode);
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
%
% TPID_PLUG plugs a TPiD object
%
% [RETVAL, D] = TPIC_PLUG(D, ADDR, PORT, ASCLIENT) plugs the TPiD handle D to a TOBI
% iD server listening at ADDR:PORT. ASCLIENT is a boolean and indicates whether
% the D object will be configured as client (for sending iD message) or as server 
% (for receiving iC messages, not supported). 
% RETVAL indicates the status of the connection (list of retvals and associated 
% descriptions is provided by TP_RETVAL).
%
% See also TPID_UNPLUG, TP_RETVAL
	$ int tpid_plug(TPiD* d, char* addr, char* port, int mode) {
	$	int retval = TPiD::Unsuccessful;
	$ 	try {
	$ 		std::string sAddr(addr);
	$ 		std::string sPort(port);
	$		retval = d->Plug(sAddr, sPort, mode);
	$	} catch(TCException e) {
	$		mexPrintf("[tpid_plug] Exception in libtobiplatform: %s, %s\n",
	$			e.GetCaller().c_str(), e.GetInfo().c_str());
	$	}
	$	return retval;
	$ } 
	$
	# int retval = tpid_plug(TPiD* d, cstring addr[64], cstring port[64], int mode);

@function [d] = tpid_unplug(d);
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
%
% TPID_UNPLUG unplugs a TPiD object
%
% See also TPID_PLUG
	$ void tpid_unplug(TPiD* d) {
	$ 	try {
	$		d->Unplug();
	$	} catch(TCException e) {
	$		mexPrintf("[tpid_unplug] Exception in libtobiplatform: %s, %s\n",
	$			e.GetCaller().c_str(), e.GetInfo().c_str());
	$	}
	$ } 
	$
	# tpid_unplug(TPiD* d);

@function [retval, abidx, d] = tpid_setrapid(d, s);
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
%
% TPID_SET sets/sends an IDMESSAGE
%
% [RETVAL, ABIDX, D] = TPIC_SET(D, S, BIDX) sends the content of an iD serializer object 
% (pointed by the S handle) using a TPiD object (pointed by the D handle).
% BIDX is the current block index, while the returned ABIDX is the block index at
% which the TOBI iD server received the iD message.
% RETVAL indicates the status of the connection (list of retvals and associated 
% descriptions is provided by TP_RETVAL).
% 
%
% See also TPID_GET, TP_RETVAL
	$ int tpid_setrapid(TPiD* d, IDSerializerRapid* serializer, int bidx, int* abidx) {
	$	int retval = TPiD::Unsuccessful;
	$ 	try {
	$		retval = d->Set(serializer, bidx, abidx);
	$	} catch(TCException e) {
	$		mexPrintf("[tpid_setrapid] Exception in libtobiplatform: %s, %s\n",
	$			e.GetCaller().c_str(), e.GetInfo().c_str());
	$	}
	$	return retval;
	$ } 
	$
	abidx = -1;
	# int retval = tpid_setrapid(TPiD* d, IDSerializerRapid* s, int bidx, [inout] int* abidx);

@function [retval, d] = tpid_getrapid(d, s);
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
%
% TPID_GET gets/receives an iD message
%
% [RETVAL, D] = TPID_GET(D, S) receives an IDMessage in an iD serializer object 
% (pointed by the S handle) using a TPiD object (pointed by the D handle).
% RETVAL indicates the status of the connection (list of retvals and associated 
% descriptions is provided by TP_RETVAL).
%
% See also TPID_SET, TP_RETVAL
	$ int tpid_getrapid(TPiD* d, IDSerializerRapid* serializer) {
	$	int retval = TPiD::Unsuccessful;
	$ 	try {
	$		retval = d->Get(serializer);
	$	} catch(TCException e) {
	$		mexPrintf("[tpid_getrapid] Exception in libtobiplatform: %s, %s\n",
	$			e.GetCaller().c_str(), e.GetInfo().c_str());
	$	}
	$	return retval;
	$ } 
	$
	# int retval = tpid_getrapid(TPiD* d, IDSerializerRapid* s);

@function [value, desc] = tp_retval(name)
% Copyright (C) 2009-2011  EPFL (Ecole Polytechnique Fédérale de Lausanne)
% Michele Tavella <michele.tavella@epfl.ch>
%
% TP_RETVAL Returns the supported TPIC and TPID return values
%
% [VALUE, DESC] = TP_RETVAL() returns the numerical values (VALUE) and the
% associated descriptions (DESC) for all the supported TPIC and TPID retvals
	value = [0 1 2 3 4 5 6 7 8];
	desc = {'Unsuccessful', 'Successful', 'ErrorSocket', 'ErrorEndpoint', 'ErrorBound', 'ErrorGeneric', 'ErrorNotsupported', 'ErrorProtocol', 'ErrorTimeout'};

